#!/usr/bin/python3
import os
import shutil
import subprocess
import signal
import urllib.request
import urllib.error

def parse_sites_cfg(file_path):
    variables = {}
    
    with open(file_path, "r") as file:
        for line in file:
            if ":" in line:
                key, value = line.split(":", 1)
                key = key.strip().lower().replace(" ", "_")
                value = value.strip()
                
                if "coordinates" in key:
                    value = list(map(float, value.split(",")))
                
                variables[key] = value
    
    return variables

def download_template(url, local_path):
    """
    Scarica il template dal URL specificato
    """
    try:
        print(f"Scaricamento template da: {url}")
        urllib.request.urlretrieve(url, local_path)
        print(f"Template scaricato con successo in: {local_path}")
        return True
    except urllib.error.URLError as e:
        print(f"Errore nel download del template: {e}")
        return False
    except Exception as e:
        print(f"Errore generico nel download: {e}")
        return False
    variables = {}
    
    with open(file_path, "r") as file:
        for line in file:
            if ":" in line:
                key, value = line.split(":", 1)
                key = key.strip().lower().replace(" ", "_")
                value = value.strip()
                
                if "coordinates" in key:
                    value = list(map(float, value.split(",")))
                
                variables[key] = value
    
    return variables

def generate_rtkrcv_config_from_template(template_path, output_path, data):
    # Rimuovi il file di configurazione esistente se presente
    if os.path.exists(output_path):
        backup_path = f"{output_path}.old"
        shutil.move(output_path, backup_path)
        print(f"File esistente spostato in: {backup_path}")
    
    # Genera i nuovi valori basati sui dati letti da sites.cfg
    rover_name = data["rover_name"]
    master_name = data["master_name"]
    master_coordinates = data.get("master_coordinates", [None, None, None])
    mcaster_ip = data["mcaster_ip"]
    mcaster_port = data["mcaster_port"]
    mcaster_mountpoint = data["mcaster_mountpoint"]
    mcaster_user = data["mcaster_user"]
    mcaster_password = data["mcaster_password"]
    mcaster_stream = data["mcaster_stream"]
    pcaster_ip = data["pcaster_ip"]
    pcaster_port = data["pcaster_port"]
    pcaster_mountpoint = data["pcaster_mountpoint"]
    pcaster_user = data["pcaster_user"]
    pcaster_password = data["pcaster_password"]
    pcaster_stream = data["pcaster_stream"]

    # Dizionario con i valori da sostituire nel template
    replacements = {
        "{{LOGSTR1_PATH}}": f"/mnt/hd/gnss/%Y/%n/%H/U{rover_name}%H%y.%n::S=1::T",
        "{{LOGSTR2_PATH}}": f"/mnt/hd/gnss/%Y/%n/%H/R{master_name}%H%y.%n::S=1::T",
        "{{MASTER_LAT}}": f"{master_coordinates[0]}",
        "{{MASTER_LON}}": f"{master_coordinates[1]}",
        "{{MASTER_HEIGHT}}": f"{master_coordinates[2]}",
        "{{MASTER_NAME}}": master_name,
        "{{MCASTER_PATH}}": f"{mcaster_user}:{mcaster_password}@{mcaster_ip}:{mcaster_port}/{mcaster_mountpoint}",
        "{{MCASTER_FORMAT}}": f"{mcaster_stream}",
        "{{PCASTER_PATH}}": f"{pcaster_user}:{pcaster_password}@{pcaster_ip}:{pcaster_port}/{pcaster_mountpoint}",
        "{{PCASTER_FORMAT}}": f"{pcaster_stream}"
    }

    # Leggi il template
    with open(template_path, "r") as template_file:
        template_content = template_file.read()

    # Sostituisci i placeholder con i valori reali
    config_content = template_content
    for placeholder, value in replacements.items():
        config_content = config_content.replace(placeholder, str(value))
        print(f"Sostituito {placeholder} con {value}")

    # Scrivi il nuovo file di configurazione
    with open(output_path, "w") as output_file:
        output_file.write(config_content)
    
    print(f"Nuovo file di configurazione generato: {output_path}")

def restart_services():
    try:
        # Esegui il primo comando
        tcp2file_command = "/home/lzer0/bin/lzer0.tcp2file.ubx -f /home/lzer0/cfg/sites.cfg >> /home/lzer0/log/lzer0.tcp2file.ubx.log 2>&1"
        print("Avvio del comando tcp2file...")
        subprocess.run(tcp2file_command, shell=True, check=True)
        print("Comando tcp2file completato con successo.")

        # Esegui il secondo comando
        
        # *** al momento tengo commentato questo comando. fa perdere un sacco di tempo all'operazione di riavvio dei servizi quindi se non e' necessario non lo eseguirei ***

        #compress_command = "/home/lzer0/bin/lzer0.compress.hourlygnssall -f /home/lzer0/cfg/sites.cfg -p 96 >> /home/lzer0/log/lzer0.compress.hourlygnss.log 2>&1"
        #print("Avvio del comando compress...")
        #subprocess.run(compress_command, shell=True, check=True)
        #print("Comando compress completato con successo.")        
        
        # Cerca e uccidi il processo contenente le keyword "rtkrcv" e "2950"
        kill_process_command = "ps -ef | grep 'rtkrcv' | grep '2950' | gawk '{print $2}'"
        rtk_process_ids = subprocess.check_output(kill_process_command, shell=True, text=True).strip().split("\n")

        for pid in rtk_process_ids:
            pid = pid.strip()
            if pid.isdigit():
                try:
                    print(f"Uccisione del processo con PID {pid}")
                    os.kill(int(pid), signal.SIGKILL)
                    print(f"Processo con pid {pid} ucciso")
                except ProcessLookupError:
                    print(f"Il processo con PID {pid} non esiste piÃ¹.")
            else:
                print(f"PID non valido: '{pid}'")
        # Avvia il nuovo processo
        start_rtk_command = "/home/lzer0/bin/lzer0.start.rtk -f /home/lzer0/cfg/rtkrcv.curr.conf >> /home/lzer0/log/lzer0.start.rtk.log 2>&1"
        print(f"Esecuzione del comando: {start_rtk_command}")
        subprocess.run(start_rtk_command, shell=True, check=True)

        # Cerca e uccidi il processo contenente le keyword "str2str" e "5754"
        kill_process_command = "ps -ef | grep 'str2str' | grep '5754' | gawk '{print $2}'"
        str2str_process_ids = subprocess.check_output(kill_process_command, shell=True, text=True).strip().split("\n")
        
        for pid in str2str_process_ids:
            pid = pid.strip()
            if pid.isdigit():
                try:
                    print(f"Uccisione del processo con PID {pid}")
                    os.kill(int(pid), signal.SIGKILL)
                    print(f"Processo con pid {pid} ucciso")
                except ProcessLookupError:
                    print(f"Il processo con PID {pid} non esiste piu.")
            else:
                print(f"PID non valido: '{pid}'")
        # Avvia il nuovo processo
        start_str2str_command = "/home/lzer0/bin/lzer0.record.hourlypos -f /home/lzer0/cfg/sites.cfg >> /home/lzer0/log/lzer0.record.hourlypos.log 2>&1"
        print(f"Esecuzione del comando: {start_str2str_command}")
        subprocess.run(start_str2str_command, shell=True, check=True)
        
        print("Tutti i servizi sono stati riavviati")
    except Exception as e:
        print(f"Errore durante l'esecuzione dei comandi post-update: {e}")


# Configurazione URL del template (modifica questo URL con il tuo)
TEMPLATE_URL = "https://gist.githubusercontent.com/sgalvi/846ee4c3b7c548a101158e3e4556d05f/raw/09d23249163143dc8b337648028194bbbbebed29/rtkrcv.template.conf"

# Esempio di utilizzo
sites_cfg_file = "/home/lzer0/cfg/sites.cfg"
rtkrcv_template_file = "/home/lzer0/cfg/rtkrcv.template.conf"
rtkrcv_conf_file = "/home/lzer0/cfg/rtkrcv.curr.conf"

# Verifica l'esistenza dei file
if not os.path.exists(sites_cfg_file):
    raise FileNotFoundError(f"Il file {sites_cfg_file} non esiste")

# Verifica se il template esiste, altrimenti scaricalo
if not os.path.exists(rtkrcv_template_file):
    print(f"Template non trovato in {rtkrcv_template_file}")
    print("Tentativo di scaricamento del template...")
    
    if not download_template(TEMPLATE_URL, rtkrcv_template_file):
        raise FileNotFoundError(f"Impossibile scaricare il template da {TEMPLATE_URL}")
else:
    print(f"Template trovato: {rtkrcv_template_file}")

# Leggi i dati da sites.cfg
data = parse_sites_cfg(sites_cfg_file)

# Genera il nuovo file rtkrcv.curr.conf dal template
generate_rtkrcv_config_from_template(rtkrcv_template_file, rtkrcv_conf_file, data)

# Esegui i comandi post-update
restart_services()
